---
title: "In-class_Ex04"
date: "April 13, 2024"
date-modified: "last-modified"
execute:
  Eval: true
  Echo: true
  Warning: false
  Freeze: true
---

```{r}
pacman::p_load(tidyverse, ggstatsplot)
```

```{r}
exam <- read_csv("data/Exam.csv")
```

makeover from the hands-on

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "parametrics",
  test.value = 60,
  bin.args = list(color = "black",
  fill = "grey50",
  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth 
                           = 2),
  xlab = "English scores"
)
```

after change the augument as parametric

This shows how to extract the s

```{r}
set.seed(1234)

p <-gghistostats(
  data = exam,
  x = ENGLISH,
  type = "parametrics",
  test.value = 60,
  bin.args = list(color = "black",
  fill = "grey50",
  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth 
                           = 2),
  xlab = "English scores"
)
```

```{r}
extract_stats(p)
```

change parametric to robust

```{r}

set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "robust",
  test.value = 60,
  bin.args = list(color = "black",
  fill = "grey50",
  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth 
                           = 2),
  xlab = "English scores"
)
```

change to bayes, changge normal curve to true// default is false. linewidth change to 0.5

```{r}

set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  bin.args = list(color = "black",
  fill = "grey50",
  alpha = 0.7),
  normal.curve = TRUE,
  normal.curve.args = list(linewidth 
                           = 0.5),
  xlab = "English scores"
)

```

centrality.type.

```{r}
ggdotplotstats(
  data = exam,
  x = ENGLISH,
  y = CLASS,
  title = "",
  xlab = ""
)
```

it does a sorting base on the value.

In-calss exercise :

```{r}
exam_long <- exam %>%
  pivot_longer(
    cols = ENGLISH:SCIENCE,
    names_to = "SUBJECT",
    values_to = "SCORE") %>%
  filter(CLASS =="3A"
  )
```

```{r}
ggwithinstats(
  data = filter(exam_long,
                SUBJECT %in%
                  c("MATHS", "SCIENCE")),
  x = SUBJECT,
  y = SCORE,
  type = "p"
)
```

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = TRUE,
  label.var = ID,
  label.expression = ENGLISH > 90 & MATHS >90,
  )
```

smoothline controls the blue line

another tool: performance , belongs to [easystat](https://cran.r-project.org/web/packages/easystats/readme/README.html)s
